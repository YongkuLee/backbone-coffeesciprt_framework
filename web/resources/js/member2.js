// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function() {
    var APPLICATION, AppView, HOST, Member, MemberList, MemberListView, MemberView, ProfileView, Question, QuestionDetailView, QuestionList, QuestionListView, QuestionView, Talk, TalkView, Talks, TalksView, Topic, TopicList, TopicListView, TopicView, app, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;

    HOST = 'http://bapul.cloudapp.net/rest/';
    APPLICATION = 'MATH';
    /* Member ==================================================
    */

    Member = (function(_super) {
      __extends(Member, _super);

      function Member() {
        _ref = Member.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Member.prototype.urlRoot = HOST + 'member';

      Member.prototype.parse = function(response) {
        return response;
      };

      return Member;

    })(Backbone.Model);
    MemberList = (function(_super) {
      __extends(MemberList, _super);

      function MemberList() {
        _ref1 = MemberList.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      MemberList.prototype.url = HOST + 'member';

      MemberList.prototype.model = Member;

      MemberList.prototype.parse = function(response) {
        return response.items;
      };

      return MemberList;

    })(Backbone.Collection);
    MemberView = (function(_super) {
      __extends(MemberView, _super);

      function MemberView() {
        _ref2 = MemberView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      MemberView.prototype.el = $('.member-box');

      MemberView.prototype.template = _.template($('#member-template').html());

      MemberView.prototype.initialize = function() {
        _.bindAll(this);
        this.profile_view = new ProfileView({
          model: this.model
        });
        return this;
      };

      MemberView.prototype.render = function() {
        $(this.el).html(this.template(this.model.toJSON()));
        return this;
      };

      MemberView.prototype.toggle = function() {
        this.profile_view.toggle(this.$('.view-button'));
        return this;
      };

      MemberView.prototype.events = {
        'click .view-button': 'toggle'
      };

      return MemberView;

    })(Backbone.View);
    MemberListView = (function(_super) {
      __extends(MemberListView, _super);

      MemberListView.prototype.el = $('.member-square');

      MemberListView.prototype.template = _.template($('#members-template').html());

      MemberListView.prototype.list_div = '.member-box';

      function MemberListView(principal) {
        this.principal = principal;
        MemberListView.__super__.constructor.call(this);
      }

      MemberListView.prototype.initialize = function() {
        _.bindAll(this);
        this.members = new MemberList;
        this.members.bind('add', this.appendItem);
        return this.render();
      };

      MemberListView.prototype.render = function() {
        $(this.el).append(this.template);
        this.addList();
        return this;
      };

      MemberListView.prototype.addList = function() {
        this.members.fetch({
          data: {
            principal: this.principal
          }
        });
        return this;
      };

      MemberListView.prototype.appendItem = function(item) {
        var member_view;

        member_view = new MemberView({
          model: item
        });
        return this.$(this.list_div).empty().append(member_view.render().el);
      };

      return MemberListView;

    })(Backbone.View);
    ProfileView = (function(_super) {
      __extends(ProfileView, _super);

      function ProfileView() {
        _ref3 = ProfileView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      ProfileView.prototype.el = $('.member-profile');

      ProfileView.prototype.template = _.template($('#profile-template').html());

      ProfileView.prototype.initialize = function() {
        _.bindAll(this);
        this.profile_open = false;
        return this;
      };

      ProfileView.prototype.render = function() {
        $(this.el).html(this.template(this.model.toJSON()));
        return this;
      };

      ProfileView.prototype.toggle = function(dom) {
        if (this.profile_open) {
          dom.removeClass('active');
          return this.close();
        } else {
          dom.addClass('active');
          return this.open();
        }
      };

      ProfileView.prototype.open = function() {
        this.profile_open = true;
        this.render();
        $('.member-content').hide();
        $('.member-profile').show();
        return this;
      };

      ProfileView.prototype.close = function() {
        this.profile_open = false;
        $('.member-content').show();
        $('.member-profile').hide();
        return this;
      };

      return ProfileView;

    })(Backbone.View);
    /* Question ==================================================
    */

    Question = (function(_super) {
      __extends(Question, _super);

      function Question() {
        _ref4 = Question.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      Question.prototype.urlRoot = HOST + 'item';

      Question.prototype.parse = function(response) {
        var member, replies, replyActive, _ref5, _ref6;

        member = response.member;
        member.username = (_ref5 = member.username) != null ? _ref5 : member.principal;
        replies = response.replies;
        if ((_ref6 = replies.length > 0) != null ? _ref6 : '') {
          replyActive = 'active';
        }
        response.replyActive = replyActive;
        return response;
      };

      return Question;

    })(Backbone.Model);
    QuestionList = (function(_super) {
      __extends(QuestionList, _super);

      function QuestionList() {
        _ref5 = QuestionList.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      QuestionList.prototype.url = HOST + 'items';

      QuestionList.prototype.model = Question;

      QuestionList.prototype.parse = function(response) {
        return response.items;
      };

      return QuestionList;

    })(Backbone.Collection);
    QuestionView = (function(_super) {
      __extends(QuestionView, _super);

      function QuestionView() {
        _ref6 = QuestionView.__super__.constructor.apply(this, arguments);
        return _ref6;
      }

      QuestionView.prototype.tagName = 'div';

      QuestionView.prototype.className = 'question ym-grid';

      QuestionView.prototype.template = _.template($('#question-template').html());

      QuestionView.prototype.initialize = function() {
        _.bindAll(this);
        this.model.bind('destroy', this.remove, this);
        return this.model.bind('change', this.render, this);
      };

      QuestionView.prototype.render = function() {
        $(this.el).html(this.template(this.model.toJSON()));
        this.$('time').timeago();
        return this;
      };

      QuestionView.prototype.detail = function() {
        return new QuestionDetailView({
          model: this.model
        });
      };

      QuestionView.prototype.events = {
        'click .delete': 'remove',
        'click .question-background': 'detail'
      };

      return QuestionView;

    })(Backbone.View);
    QuestionDetailView = (function(_super) {
      __extends(QuestionDetailView, _super);

      function QuestionDetailView() {
        _ref7 = QuestionDetailView.__super__.constructor.apply(this, arguments);
        return _ref7;
      }

      QuestionDetailView.prototype.el = $('.question-detail-box');

      QuestionDetailView.prototype.template = _.template($('#question-detail-template').html());

      QuestionDetailView.prototype.initialize = function() {
        _.bindAll(this);
        return this.render();
      };

      QuestionDetailView.prototype.render = function() {
        this.open();
        $(this.el).html(this.template(this.model.toJSON()));
        this.$('time').timeago();
        return this;
      };

      QuestionDetailView.prototype.open = function() {
        $('.feed-roll').hide();
        return $('.question-detail-roll').show();
      };

      QuestionDetailView.prototype.close = function() {
        console.log('close question detail');
        $('.question-detail-roll').hide();
        return $('.feed-roll').show();
      };

      QuestionDetailView.prototype.events = {
        'click .close-button': 'close'
      };

      return QuestionDetailView;

    })(Backbone.View);
    QuestionListView = (function(_super) {
      __extends(QuestionListView, _super);

      QuestionListView.prototype.el = $('.question-box');

      QuestionListView.prototype.template = _.template($('#questions-template').html());

      QuestionListView.prototype.list_div = '.question-list';

      function QuestionListView(principal) {
        this.principal = principal;
        QuestionListView.__super__.constructor.call(this);
      }

      QuestionListView.prototype.initialize = function() {
        _.bindAll(this);
        this.questions = new QuestionList;
        this.questions.bind('add', this.appendItem);
        this.offset = 0;
        this.limit = 10;
        return this.render();
      };

      QuestionListView.prototype.render = function() {
        $(this.el).append(this.template);
        this.addList();
        return this;
      };

      QuestionListView.prototype.appendItem = function(item) {
        var item_view;

        item_view = new QuestionView({
          model: item
        });
        return this.$(this.list_div).append(item_view.render().el);
      };

      QuestionListView.prototype.addList = function() {
        this.questions.fetch({
          data: {
            productId: '2760145242091375915',
            offset: this.offset,
            limit: this.limit,
            principal: this.principal
          }
        });
        return this.offset += 10;
      };

      QuestionListView.prototype.events = function() {
        return {
          'click #next': 'addList'
        };
      };

      return QuestionListView;

    })(Backbone.View);
    /* Talk ==================================================
    */

    Talk = (function(_super) {
      __extends(Talk, _super);

      function Talk() {
        _ref8 = Talk.__super__.constructor.apply(this, arguments);
        return _ref8;
      }

      Talk.prototype.urlRoot = HOST + 'talk';

      Talk.prototype.parse = function(response) {
        var member, _ref9;

        member = response.member;
        member.username = (_ref9 = member.username) != null ? _ref9 : member.principal;
        return response;
      };

      return Talk;

    })(Backbone.Model);
    Talks = (function(_super) {
      __extends(Talks, _super);

      function Talks() {
        _ref9 = Talks.__super__.constructor.apply(this, arguments);
        return _ref9;
      }

      Talks.prototype.url = HOST + 'talks';

      Talks.prototype.model = Talk;

      Talks.prototype.parse = function(response) {
        return response.items;
      };

      return Talks;

    })(Backbone.Collection);
    TalkView = (function(_super) {
      __extends(TalkView, _super);

      function TalkView() {
        _ref10 = TalkView.__super__.constructor.apply(this, arguments);
        return _ref10;
      }

      TalkView.prototype.tagName = 'div';

      TalkView.prototype.className = 'feed';

      TalkView.prototype.template = _.template($('#feed-template').html());

      TalkView.prototype.initialize = function() {
        _.bindAll(this);
        this.model.bind('destroy', this.remove, this);
        return this.model.bind('change', this.render, this);
      };

      TalkView.prototype.render = function() {
        $(this.el).html(this.template(this.model.toJSON()));
        this.$('time').timeago();
        return this;
      };

      return TalkView;

    })(Backbone.View);
    TalksView = (function(_super) {
      __extends(TalksView, _super);

      function TalksView() {
        _ref11 = TalksView.__super__.constructor.apply(this, arguments);
        return _ref11;
      }

      TalksView.prototype.el = $('.feed-box');

      TalksView.prototype.template = _.template($('#feeds-template').html());

      TalksView.prototype.list_div = '.feed-window';

      TalksView.prototype.initialize = function() {
        _.bindAll(this);
        this.talks = new Talks;
        this.talks.bind('add', this.appendItem);
        this.offset = 0;
        this.limit = 10;
        return this.render();
      };

      TalksView.prototype.render = function() {
        $(this.el).append(this.template);
        this.addList();
        return this;
      };

      TalksView.prototype.addList = function() {
        this.talks.fetch({
          data: {
            productId: '2760145242091375915',
            application: 'MATH',
            offset: this.offset,
            limit: this.limit
          }
        });
        return this.offset += 10;
      };

      TalksView.prototype.appendItem = function(item) {
        var item_view;

        item_view = new TalkView({
          model: item
        });
        return this.$(this.list_div).append(item_view.render().el);
      };

      return TalksView;

    })(Backbone.View);
    Topic = (function(_super) {
      __extends(Topic, _super);

      function Topic() {
        _ref12 = Topic.__super__.constructor.apply(this, arguments);
        return _ref12;
      }

      Topic.prototype.urlRoot = HOST + 'topic';

      Topic.prototype.parse = function(response) {
        return response;
      };

      return Topic;

    })(Backbone.Model);
    TopicList = (function(_super) {
      __extends(TopicList, _super);

      function TopicList() {
        _ref13 = TopicList.__super__.constructor.apply(this, arguments);
        return _ref13;
      }

      TopicList.prototype.url = HOST + 'topics';

      TopicList.prototype.model = Member;

      TopicList.prototype.parse = function(response) {
        return response.items;
      };

      return TopicList;

    })(Backbone.Collection);
    TopicView = (function(_super) {
      __extends(TopicView, _super);

      function TopicView() {
        _ref14 = TopicView.__super__.constructor.apply(this, arguments);
        return _ref14;
      }

      TopicView.prototype.tagName = 'li';

      TopicView.prototype.className = 'tag';

      TopicView.prototype.template = _.template($('#topic-template').html());

      TopicView.prototype.initialize = function() {
        return _.bindAll(this);
      };

      TopicView.prototype.render = function() {
        $(this.el).html(this.template(this.model.toJSON()));
        return this;
      };

      return TopicView;

    })(Backbone.View);
    TopicListView = (function(_super) {
      __extends(TopicListView, _super);

      TopicListView.prototype.el = $('.topics-box');

      TopicListView.prototype.template = _.template($('#topics-template').html());

      TopicListView.prototype.list_div = 'dl';

      function TopicListView(principal) {
        this.principal = principal;
        TopicListView.__super__.constructor.call(this);
      }

      TopicListView.prototype.initialize = function() {
        _.bindAll(this);
        this.topics = new TopicList;
        this.topics.bind('add', this.appendItem);
        return this.render();
      };

      TopicListView.prototype.render = function() {
        $(this.el).append(this.template);
        this.addList();
        return this;
      };

      TopicListView.prototype.addList = function() {
        this.topics.fetch({
          data: {
            principal: this.principal
          }
        });
        return this;
      };

      TopicListView.prototype.appendItem = function(item) {
        var topic_view;

        topic_view = new TopicView({
          model: item
        });
        return this.$(this.list_div).append(topic_view.render().el);
      };

      return TopicListView;

    })(Backbone.View);
    /* App ==================================================
    */

    AppView = (function(_super) {
      var principal;

      __extends(AppView, _super);

      function AppView() {
        _ref15 = AppView.__super__.constructor.apply(this, arguments);
        return _ref15;
      }

      principal = 'tester';

      AppView.prototype.initialize = function() {
        this.render();
        return $('.member-image').click(function() {
          this.principal = $(this).attr('id');
          console.log(this.principal);
          return this.render();
        });
      };

      AppView.prototype.render = function() {
        var member_list_view, quesiton_list_view, talks_view, topic_list_view;

        member_list_view = new MemberListView(this.principal);
        topic_list_view = new TopicListView(this.principal);
        quesiton_list_view = new QuestionListView(this.principal);
        return talks_view = new TalksView;
      };

      return AppView;

    })(Backbone.View);
    return app = new AppView;
  });

}).call(this);
