// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jQuery(function() {
    var AppView, HOST, Notice, NoticeView, Notices, NoticesView, Report, ReportView, Reports, ReportsView, appView, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;

    HOST = 'http://bapul.cloudapp.net/rest/';
    Report = (function(_super) {
      __extends(Report, _super);

      function Report() {
        _ref = Report.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Report.prototype.urlRoot = HOST + 'report';

      return Report;

    })(Backbone.Model);
    Reports = (function(_super) {
      __extends(Reports, _super);

      function Reports() {
        _ref1 = Reports.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Reports.prototype.url = HOST + 'reports';

      Reports.prototype.model = Report;

      Reports.prototype.parse = function(response) {
        return response.items;
      };

      return Reports;

    })(Backbone.Collection);
    ReportView = (function(_super) {
      __extends(ReportView, _super);

      function ReportView() {
        this.render = __bind(this.render, this);
        this.initialize = __bind(this.initialize, this);        _ref2 = ReportView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      ReportView.prototype.tagName = 'li';

      ReportView.prototype.template = _.template($('#report-template').html());

      ReportView.prototype.initialize = function() {
        this.model.on('destroy', this.remove, this);
        return this.model.on('change', this.render, this);
      };

      ReportView.prototype.render = function() {
        this.$el.html(this.template(this.model.toJSON()));
        this.$('time').timeago();
        return this;
      };

      return ReportView;

    })(Backbone.View);
    ReportsView = (function(_super) {
      __extends(ReportsView, _super);

      function ReportsView() {
        this.initialize = __bind(this.initialize, this);        _ref3 = ReportsView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      ReportsView.prototype.tagName = 'section';

      ReportsView.prototype.template = _.template($('#reports-template').html());

      ReportsView.prototype.initialize = function() {
        this.reports = new Reports;
        this.reports.on('add', this.addOne, this);
        return this.reports.on('reset', this.addAll, this);
      };

      ReportsView.prototype.render = function() {
        this.$el.html(this.template).attr('id', 'main');
        this.reports.fetch({
          data: {
            productId: '2760145242091375915'
          }
        });
        return this;
      };

      ReportsView.prototype.addOne = function(report) {
        var view;

        view = new ReportView({
          model: report
        });
        return this.$('.collection').append(view.render().el);
      };

      ReportsView.prototype.addAll = function() {
        return this.notices.each(this.addOne, this);
      };

      return ReportsView;

    })(Backbone.View);
    Notice = (function(_super) {
      __extends(Notice, _super);

      function Notice() {
        _ref4 = Notice.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      Notice.prototype.urlRoot = HOST + 'notice';

      return Notice;

    })(Backbone.Model);
    Notices = (function(_super) {
      __extends(Notices, _super);

      function Notices() {
        _ref5 = Notices.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      Notices.prototype.url = HOST + 'notices';

      Notices.prototype.model = Notice;

      Notices.prototype.parse = function(response) {
        return response.items;
      };

      return Notices;

    })(Backbone.Collection);
    NoticeView = (function(_super) {
      __extends(NoticeView, _super);

      function NoticeView() {
        this.render = __bind(this.render, this);
        this.initialize = __bind(this.initialize, this);        _ref6 = NoticeView.__super__.constructor.apply(this, arguments);
        return _ref6;
      }

      NoticeView.prototype.tagName = 'li';

      NoticeView.prototype.template = _.template($('#notice-template').html());

      NoticeView.prototype.initialize = function() {
        this.model.on('destroy', this.remove, this);
        return this.model.on('change', this.render, this);
      };

      NoticeView.prototype.render = function() {
        this.$el.html(this.template(this.model.toJSON()));
        this.$('time').timeago();
        return this;
      };

      return NoticeView;

    })(Backbone.View);
    NoticesView = (function(_super) {
      __extends(NoticesView, _super);

      function NoticesView() {
        this.initialize = __bind(this.initialize, this);        _ref7 = NoticesView.__super__.constructor.apply(this, arguments);
        return _ref7;
      }

      NoticesView.prototype.tagName = 'section';

      NoticesView.prototype.template = _.template($('#notices-template').html());

      NoticesView.prototype.initialize = function() {
        this.notices = new Notices;
        this.notices.on('add', this.addOne, this);
        return this.notices.on('reset', this.addAll, this);
      };

      NoticesView.prototype.render = function() {
        this.$el.html(this.template).attr('id', 'main');
        this.notices.fetch({
          data: {
            productId: '2760145242091375915'
          }
        });
        return this;
      };

      NoticesView.prototype.addOne = function(notice) {
        var view;

        view = new NoticeView({
          model: notice
        });
        return this.$('.collection').append(view.render().el);
      };

      NoticesView.prototype.addAll = function() {
        return this.notices.each(this.addOne, this);
      };

      return NoticesView;

    })(Backbone.View);
    AppView = (function(_super) {
      __extends(AppView, _super);

      function AppView() {
        _ref8 = AppView.__super__.constructor.apply(this, arguments);
        return _ref8;
      }

      AppView.prototype.el = $('body');

      AppView.prototype.template = _.template($('#app-template').html());

      AppView.prototype.events = {
        'click #btn-notice': 'openNotice',
        'click #btn-report': 'openReport'
      };

      AppView.prototype.views = {};

      AppView.prototype.initialize = function() {
        this.$el.html(this.template);
        return this.openNotice();
      };

      AppView.prototype.openNotice = function() {
        this.clear();
        this.views.notices = new NoticesView;
        return this.$el.append(this.views.notices.render().el);
      };

      AppView.prototype.openReport = function() {
        this.clear();
        this.views.reports = new ReportsView;
        return this.$el.append(this.views.reports.render().el);
      };

      AppView.prototype.clear = function() {
        var name, view, _ref9, _results;

        _ref9 = this.views;
        _results = [];
        for (name in _ref9) {
          view = _ref9[name];
          _results.push(view.remove());
        }
        return _results;
      };

      return AppView;

    })(Backbone.View);
    appView = new AppView;
    return appView.render();
  });

}).call(this);
