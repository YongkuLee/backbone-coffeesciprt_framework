// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jQuery(function() {
    var AppView, HOST, Question, QuestionView, Questions, QuestionsView, appView, _ref, _ref1, _ref2, _ref3, _ref4;

    HOST = 'http://bapul.cloudapp.net/rest/';
    Question = (function(_super) {
      __extends(Question, _super);

      function Question() {
        _ref = Question.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Question.prototype.urlRoot = HOST + 'question';

      return Question;

    })(Backbone.Model);
    Questions = (function(_super) {
      __extends(Questions, _super);

      function Questions() {
        _ref1 = Questions.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Questions.prototype.url = HOST + 'questions';

      Questions.prototype.model = Question;

      Questions.prototype.parse = function(response) {
        return response.items;
      };

      return Questions;

    })(Backbone.Collection);
    QuestionView = (function(_super) {
      __extends(QuestionView, _super);

      function QuestionView() {
        this.render = __bind(this.render, this);
        this.initialize = __bind(this.initialize, this);        _ref2 = QuestionView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      QuestionView.prototype.tagName = 'li';

      QuestionView.prototype.template = _.template($('#question-template').html());

      QuestionView.prototype.initialize = function() {
        this.model.on('destroy', this.remove, this);
        return this.model.on('change', this.render, this);
      };

      QuestionView.prototype.render = function() {
        this.$el.html(this.template(this.model.toJSON()));
        this.$('time').timeago();
        return this;
      };

      return QuestionView;

    })(Backbone.View);
    QuestionsView = (function(_super) {
      __extends(QuestionsView, _super);

      function QuestionsView() {
        this.initialize = __bind(this.initialize, this);        _ref3 = QuestionsView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      QuestionsView.prototype.tagName = 'section';

      QuestionsView.prototype.template = _.template($('#questions-template').html());

      QuestionsView.prototype.initialize = function() {
        this.questions = new Questions;
        this.questions.on('add', this.addOne, this);
        return this.questions.on('reset', this.addAll, this);
      };

      QuestionsView.prototype.render = function() {
        this.$el.html(this.template).attr('id', 'main');
        this.questions.fetch({
          data: {
            productId: '2760145242091375915'
          }
        });
        return this;
      };

      QuestionsView.prototype.addOne = function(question) {
        var view;

        view = new QuestionView({
          model: question
        });
        return this('.collection').append(view.render().el);
      };

      QuestionsView.prototype.addAll = function() {
        return this.questions.each(this.addOne, this);
      };

      return QuestionsView;

    })(Backbone.View);
    AppView = (function(_super) {
      __extends(AppView, _super);

      function AppView() {
        _ref4 = AppView.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      AppView.prototype.el = $('body');

      AppView.prototype.template = _.template($('#app-template').html());

      AppView.prototype.events = {
        'click #btn-question': 'openQuestion'
      };

      AppView.prototype.views = {};

      AppView.prototype.initialize = function() {
        this.$el.html(this.template);
        return this.openQuestion();
      };

      AppView.prototype.openQuestion = function() {
        this.clear();
        this.views.questions = new QuestionsView;
        return this.$el.append(this.views.questions.render().el);
      };

      AppView.prototype.clear = function() {
        var name, view, _ref5, _results;

        _ref5 = this.views;
        _results = [];
        for (name in _ref5) {
          view = _ref5[name];
          _results.push(view.remove());
        }
        return _results;
      };

      return AppView;

    })(Backbone.View);
    appView = new AppView;
    return appView.render();
  });

}).call(this);
